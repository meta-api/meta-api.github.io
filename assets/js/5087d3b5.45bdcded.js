"use strict";(self.webpackChunkmeta_api_docs=self.webpackChunkmeta_api_docs||[]).push([[4627],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(h,i(i({ref:n},s),{},{components:t})):r.createElement(h,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9467:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],p={id:"graphql-connector",title:"Use a connector for graphQL"},c=void 0,l={unversionedId:"advanced/graphql-connection/graphql-connector",id:"advanced/graphql-connection/graphql-connector",title:"Use a connector for graphQL",description:"Why using a connector for a GraphQL API",source:"@site/docs/advanced/graphql-connection/1-graphql-connector.md",sourceDirName:"advanced/graphql-connection",slug:"/advanced/graphql-connection/graphql-connector",permalink:"/docs/advanced/graphql-connection/graphql-connector",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"graphql-connector",title:"Use a connector for graphQL"},sidebar:"mySidebar",previous:{title:"Output file from Spell response",permalink:"/docs/advanced/files-spell/output-file"},next:{title:"Integrate GraphQL with axios",permalink:"/docs/advanced/graphql-connection/axios-graphql"}},s={},u=[{value:"Why using a connector for a GraphQL API",id:"why-using-a-connector-for-a-graphql-api",level:2},{value:"How to add my API for GraphQL",id:"how-to-add-my-api-for-graphql",level:2},{value:"OpenAPI Template",id:"openapi-template",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"why-using-a-connector-for-a-graphql-api"},"Why using a connector for a GraphQL API"),(0,o.kt)("p",null,"You can create your own API to support GraphQL using OpenAPI."),(0,o.kt)("p",null,"You won't have GraphQL feature like introspection, but you'll benefit all Meta API's feature like monitoring and authentication management."),(0,o.kt)("p",null,"That's our recommended way to use GraphQL inside Meta API."),(0,o.kt)("h2",{id:"how-to-add-my-api-for-graphql"},"How to add my API for GraphQL"),(0,o.kt)("p",null,"You'll find below an OpenAPI template to create a generic API with one endpoint to use GraphQL."),(0,o.kt)("p",null,"Once you get this template, you'll have to edit it to change or add the following information: "),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Edit the title"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Edit the target URL"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Adjust (if needed) the path (by default ",(0,o.kt)("inlineCode",{parentName:"li"},"/graphql"),")"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add a ",(0,o.kt)("inlineCode",{parentName:"li"},"securitySchema")," according to your API (you have an example with an API Key inside the template)"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Edit the global ",(0,o.kt)("inlineCode",{parentName:"li"},"security")," object, according to your new security schema")),(0,o.kt)("h2",{id:"openapi-template"},"OpenAPI Template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "openapi": "3.0.0",\n  "info": {\n    "title": "YOUR API",\n    "version": "1.0"\n  },\n  "servers": [\n    {\n      "url": "https://yourServer.com"\n    }\n  ],\n  "paths": {\n    "/graphql": {\n      "post": {\n        "summary": "Get GraphQL",\n        "operationId": "post-graphql",\n        "responses": {\n          "200": {\n            "description": "OK",\n            "content": {\n              "application/json": {\n                "schema": {\n                  "description": "",\n                  "type": "object",\n                  "x-examples": {\n                    "example-1": {\n                      "data": {},\n                      "errors": []\n                    }\n                  },\n                  "properties": {\n                    "data": {\n                      "type": "object"\n                    },\n                    "errors": {\n                      "type": "array",\n                      "items": {\n                        "type": "string"\n                      }\n                    }\n                  },\n                  "required": [\n                    "data",\n                    "errors"\n                  ]\n                }\n              }\n            }\n          }\n        },\n        "tags": [\n          "graph"\n        ],\n        "parameters": [\n          {\n            "schema": {\n              "type": "string",\n              "example": "{Post(id: \\"XXX\\") {votes {}}}"\n            },\n            "in": "query",\n            "name": "query",\n            "description": "Graph QL query. [See the official GraphQL documentation](https://graphql.org/learn/)."\n          }\n        ],\n        "description": "",\n        "requestBody": {\n          "content": {\n            "application/json": {\n              "schema": {\n                "description": "",\n                "type": "object",\n                "x-examples": {\n                  "example-1": {\n                    "query": "...",\n                    "operationName": "...",\n                    "variables": {\n                      "myVariable": "someValue"\n                    }\n                  }\n                },\n                "properties": {\n                  "query": {\n                    "type": "string",\n                    "minLength": 1,\n                    "description": "GraphQL query to be sent to the server"\n                  },\n                  "operationName": {\n                    "type": "string",\n                    "minLength": 1,\n                    "description": "operationName is only required if multiple operations are present in the query."\n                  },\n                  "variables": {\n                    "type": "object",\n                    "description": "Query variables encoded has an JSON Object"\n                  }\n                },\n                "required": [\n                  "query"\n                ]\n              },\n              "examples": {\n                "example-1": {\n                  "value": {\n                    "query": "{Post(id: \'XXX\') {votes {}}}",\n                    "operationName": "string",\n                    "variables": {\n                      "myVariable": "someValue"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  "components": {\n    "schemas": {},\n    "securitySchemes": {\n        "APIKey": {\n            "name": "api_key",\n            "type": "apiKey",\n            "in": "query"\n      }\n    }\n  },\n  "security": [\n    {\n      "APIKey": []\n    }\n  ]\n}\n')))}m.isMDXComponent=!0}}]);