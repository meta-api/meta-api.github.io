"use strict";(self.webpackChunkmeta_api_docs=self.webpackChunkmeta_api_docs||[]).push([[9285],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(y,l(l({ref:t},c),{},{components:n})):o.createElement(y,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9091:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],i={id:"code-editor",title:"Structure of the code editor"},s=void 0,u={unversionedId:"spell/building-spell/code-editor",id:"spell/building-spell/code-editor",title:"Structure of the code editor",description:"Code editor",source:"@site/docs/spell/building-spell/1-code-editor.md",sourceDirName:"spell/building-spell",slug:"/spell/building-spell/code-editor",permalink:"/docs/spell/building-spell/code-editor",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"code-editor",title:"Structure of the code editor"},sidebar:"mySidebar",previous:{title:"Building a Spell",permalink:"/docs/category/building-a-spell"},next:{title:"Add and configure connectors",permalink:"/docs/spell/building-spell/add-config-connectors"}},c={},p=[{value:"Code editor",id:"code-editor",level:2},{value:"Activity panel",id:"activity-panel",level:2},{value:"Connector&#39;s panel",id:"connectors-panel",level:2},{value:"Toolbar actions",id:"toolbar-actions",level:2}],d={toc:p};function m(e){var t=e.components,i=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"code-editor"},"Code editor"),(0,a.kt)("p",null,"Our code editor contains multiple panel and part to create a full environment for your API automation and integration development."),(0,a.kt)("p",null,"Here is an example of main sections:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Code editor",src:n(2511).Z,width:"1920",height:"1079"})),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Connector's panel"),": You'll have the list of all connectors configured inside your Spell. You can add new connectors from this panel. Connectors are automatically sorted in the same order that the code snippets used inside your code."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Main code editor"),": you can write your JavaScript and TypeScript code here. We're using the same engine as VSCode to provide you the best experience to write code inside your browser. You'll have autocompletion, syntax coloration, auto formatting and more."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Detail panel"),": the right panel is used to display the console, details about a connector, hints and advices to help you with the creation of your Spell, etc..."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Toolbar"),": you'll find all the buttons to interact with your Spell editor: open the console, manage your Payload, open your Meta Storage database, manage dependencies and publish a new version. You have also buttons to save and run your Spell to test it.")),(0,a.kt)("h2",{id:"activity-panel"},"Activity panel"),(0,a.kt)("p",null,"If nothing is selected, you'll see an activity panel on the right part of your Spell."),(0,a.kt)("p",null,"This panel will show you notifications about missing parameters, unused connectors and others tips to help you build your Spell."),(0,a.kt)("p",null,"Here is an example of the activity panel showing a notification about missing required parameters:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Example activity panel",src:n(4504).Z,width:"1919",height:"1078"})),(0,a.kt)("h2",{id:"connectors-panel"},"Connector's panel"),(0,a.kt)("p",null,"On the left, you have the connector's panel."),(0,a.kt)("p",null,"You can select and add new connectors from this panel. The panel auto extends when you hover it, showing some details on each connector, like the name of the API and the endpoint associated."),(0,a.kt)("p",null,"You can select and unselect a connector by clicking on it."),(0,a.kt)("p",null,"If the connector is missing from your code, you'll see a yellow indicator around the connector. Having an unused connector inside your Spell doesn't affect your Spell performances. At run, this connector will be ignored."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Example missing connector",src:n(6399).Z,width:"1917",height:"1079"})),(0,a.kt)("p",null,"If a required parameter or authentication is missing on one of the connectors, you'll see a red indicator around it."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Example missing required parameters",src:n(3754).Z,width:"1917",height:"1079"})),(0,a.kt)("h2",{id:"toolbar-actions"},"Toolbar actions"),(0,a.kt)("p",null,"At the bottom of your code editor, you'll see all additional tools available inside your Spell."),(0,a.kt)("p",null,"Some explanation about these buttons:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Console"),": the Console is automatically opened when your run a Spell. The console will show you both logs and the response of your Spell. If you open the Console manually, we'll retrieve for you the last logs and response."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Payload"),": the Payload is a JSON Object send to your Spell when you run it during your development. You can access the content of this Payload inside your Spell using the ",(0,a.kt)("inlineCode",{parentName:"li"},"params")," variable (more explanation ",(0,a.kt)("a",{parentName:"li",href:"/docs/spell/building-spell/setting-payload"},"here"),"). You can set the Payload for your tests by clicking this button."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Meta Storage"),": it's our integrated key/value database, available directly inside your Spell. Clicking on it will show you the content of your Meta Storage database and help you to use it inside your Spell."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dependencies"),": sometimes, you need to use existing libraries to speed up your development or to connect to external services not available through APIs. You can manage NodeJS dependencies from here: we are connected to NPM to easily add libraries to your Spell."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Versions"),": once your Spell is done, you can create a new version of it in order to deploy it on production. More explanation about versioning and deploying your Spell are ",(0,a.kt)("a",{parentName:"li",href:"/docs/category/managing-versions-of-a-spell"},"available here"),".")),(0,a.kt)("p",null,"In addition of these buttons, you have two more buttons available on the right side:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Save"),": this button will save the code you've written to your account. You can now re-open your Spell on any computer or web browser."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Run"),": send a new test request using this button. The ",(0,a.kt)("em",{parentName:"li"},"Console")," panel will be open automatically, showing you the response and the logs. More info on this ",(0,a.kt)("a",{parentName:"li",href:"/docs/spell/using-spell/run-spell-dev"},"here"),".")))}m.isMDXComponent=!0},2511:function(e,t,n){t.Z=n.p+"assets/images/code-editor-tour-a243b8bd1adcc0dbe35938a305466a6b.jpg"},4504:function(e,t,n){t.Z=n.p+"assets/images/exemple-activity-panel-f5b23b4e002e08a81071928d07ba858e.jpg"},3754:function(e,t,n){t.Z=n.p+"assets/images/missing-required-params-e7351126bcf218eb10d94a682bcff2b4.jpg"},6399:function(e,t,n){t.Z=n.p+"assets/images/spell-missing-connector-b75dd05828a25bf137ab4b71c3072b0f.jpg"}}]);