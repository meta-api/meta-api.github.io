"use strict";(self.webpackChunkmeta_api_docs=self.webpackChunkmeta_api_docs||[]).push([[5891],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9980:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"working-connector-value",title:"Working with connector value"},c=void 0,s={unversionedId:"spell/building-spell/working-connector-value",id:"spell/building-spell/working-connector-value",title:"Working with connector value",description:"Anatomy of the connector's code",source:"@site/docs/spell/building-spell/3-working-connector-value.md",sourceDirName:"spell/building-spell",slug:"/spell/building-spell/working-connector-value",permalink:"/docs/spell/building-spell/working-connector-value",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"working-connector-value",title:"Working with connector value"},sidebar:"mySidebar",previous:{title:"Add and configure connectors",permalink:"/docs/spell/building-spell/add-config-connectors"},next:{title:"Link variable from the code to a connector",permalink:"/docs/spell/building-spell/link-variable-from-code-connector"}},u={},p=[{value:"Anatomy of the connector&#39;s code",id:"anatomy-of-the-connectors-code",level:2},{value:"Adapt the code to your needs",id:"adapt-the-code-to-your-needs",level:2},{value:"Get data result from a connector",id:"get-data-result-from-a-connector",level:2},{value:"Destructuring data",id:"destructuring-data",level:3},{value:"Accessing sub property with dot notation",id:"accessing-sub-property-with-dot-notation",level:3}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"anatomy-of-the-connectors-code"},"Anatomy of the connector's code"),(0,a.kt)("p",null,"This is an example of a connector's code snippet when you ",(0,a.kt)("a",{parentName:"p",href:"/docs/spell/building-spell/add-config-connectors"},"add a connector")," to your Spell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'//#region Start of Airtable connector\nconst airtableResult: Datagetbaseidbasename = await connectorService.config(\n  "62b7363ed54c127d638c4d70",\n  {}\n);\nconsole.info({ Airtable: airtableResult });\n//#endregion End of Airtable connector\n')),(0,a.kt)("p",null,"We'll decrypt all part of this code snippet:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"const airtableResult"),": the variable declaration where the API's response will be stored."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},": Datagetbaseidbasename"),": this is the ",(0,a.kt)("em",{parentName:"li"},"Typescript")," notation to add type to the variable. That will give you autocompletion of the API's response schema inside your code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"await connectorService.config("),": our internal connector's service to link the spell's configuration to your code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"62b7363ed54c127d638c4d70"'),": the unique configuration ID of your added connector. This ID is calculated when you add the connector to your Spell."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{}"),": this empty object is the body when you call a ",(0,a.kt)("inlineCode",{parentName:"li"},"POST")," endpoint for example. For a ",(0,a.kt)("inlineCode",{parentName:"li"},"GET")," request, this object is unused."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'console.info({ "Airtable" : airtableResult });'),": we add a ",(0,a.kt)("inlineCode",{parentName:"li"},"console.info")," for you to have the API's response inside your logs.")),(0,a.kt)("p",null,"Finally, this snippet is surrounded by comments (",(0,a.kt)("inlineCode",{parentName:"p"},"//"),") to make them more remarkable inside the code, you can even collapse the connector's code to give you some space."),(0,a.kt)("h2",{id:"adapt-the-code-to-your-needs"},"Adapt the code to your needs"),(0,a.kt)("p",null,"You can adjust this snippet of code to your need:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Change the variable name (",(0,a.kt)("inlineCode",{parentName:"li"},"airtableResult")," in our example) to use a more relevant name (",(0,a.kt)("inlineCode",{parentName:"li"},"myUsers")," for example)"),(0,a.kt)("li",{parentName:"ul"},"You can remove the ",(0,a.kt)("em",{parentName:"li"},"Typescript")," annotation (",(0,a.kt)("inlineCode",{parentName:"li"},": Datagetbaseidbasename")," in our example) if it's creating conflicts."),(0,a.kt)("li",{parentName:"ul"},"Surround this snippet of code with ",(0,a.kt)("inlineCode",{parentName:"li"},"try / catch")," or libraries like ",(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/bottleneck"},"bottleneck")," or ",(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/async-retry"},"async-retry")," to add mechanisms to your connector.")),(0,a.kt)("h2",{id:"get-data-result-from-a-connector"},"Get data result from a connector"),(0,a.kt)("p",null,"Here are two ways to retrieve data from your connectors"),(0,a.kt)("h3",{id:"destructuring-data"},"Destructuring data"),(0,a.kt)("p",null,"You can use JS ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring assignment")," to extract sub properties from your connector's variable."),(0,a.kt)("p",null,"For example: if you have a connector that'll return data like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    result: {\n        id: "abc123",\n    }\n}\n')),(0,a.kt)("p",null,"you can use destructuring assignment to write your connector's code like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'//#region Start of Airtable connector\nconst {\n  result: { id },\n}: Datagetbaseidbasename = await connectorService.config(\n  "62b7363ed54c127d638c4d70",\n  {}\n);\nconsole.info({ ID: id });\n//#endregion End of Airtable connector\n')),(0,a.kt)("p",null,"That will create a ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," variable with the content of the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," sub property inside."),(0,a.kt)("h3",{id:"accessing-sub-property-with-dot-notation"},"Accessing sub property with dot notation"),(0,a.kt)("p",null,"The classical way to access data is to use the JS dot notation."),(0,a.kt)("p",null,"For example, if you have this result from a connector:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    result: {\n        id: "abc123",\n    }\n}\n')),(0,a.kt)("p",null,"You can access the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'//#region Start of Airtable connector\nconst airtableResult: Datagetbaseidbasename = await connectorService.config(\n  "62b7363ed54c127d638c4d70",\n  {}\n);\nconsole.info({ Id: airtableResult.result.id });\n//#endregion End of Airtable connector\n')),(0,a.kt)("p",null,"Our code editor embraces fully ",(0,a.kt)("em",{parentName:"p"},"JavaScript")," and ",(0,a.kt)("em",{parentName:"p"},"TypeScript"),", so you can do the most of every API you use and in one of the common language."))}m.isMDXComponent=!0}}]);