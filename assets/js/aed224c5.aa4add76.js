"use strict";(self.webpackChunkmeta_api_docs=self.webpackChunkmeta_api_docs||[]).push([[2907],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),f=i,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6245:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=r(7462),i=r(3366),o=(r(7294),r(3905)),a=["components"],l={id:"filtering-ips",title:"Filtering IPs on a specific Spell"},s=void 0,c={unversionedId:"security/filtering-ips",id:"security/filtering-ips",title:"Filtering IPs on a specific Spell",description:"In some cases, you want to limit access of a specific Spell to some servers to enhance security.",source:"@site/docs/security/4-filtering-ips.md",sourceDirName:"security",slug:"/security/filtering-ips",permalink:"/docs/security/filtering-ips",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"filtering-ips",title:"Filtering IPs on a specific Spell"},sidebar:"mySidebar",previous:{title:"How does Meta API handle data?",permalink:"/docs/security/handle-data-meta-api"},next:{title:"Monitoring & reporting",permalink:"/docs/category/monitoring--reporting"}},p={},u=[],d={toc:u};function f(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In some cases, you want to limit access of a specific Spell to some servers to enhance security."),(0,o.kt)("p",null,"You can limit the allowed IP addresses to run a Spell using this code snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const ALLOWLIST_IP = [\n  "10.0.0.1", //Production server\n  "10.0.0.2", //Testing machine\n];\n\nif (!params.headers["x-forwarded-for"]) {\n  throw new Error("Can\'t detect source IP for filtering");\n}\n\nif (!ALLOWLIST_IP.includes(params.headers["x-forwarded-for"])) {\n  throw new Error(`IP not allowed: ${params.headers["x-forwarded-for"]}`);\n}\n')),(0,o.kt)("p",null,"This code snippet must be added at the top of a Spell and will work like this:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, we defined an ",(0,o.kt)("em",{parentName:"li"},"array")," of allowed IP addresses to run this Spell."),(0,o.kt)("li",{parentName:"ul"},"Then, we'll check if the header ",(0,o.kt)("inlineCode",{parentName:"li"},"x-forwaded-for")," is present inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"params"),". This parameter is automatically added by our engine"),(0,o.kt)("li",{parentName:"ul"},"Finally, we'll verify if the IP address inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"x-forwaded-for")," is present inside our ",(0,o.kt)("inlineCode",{parentName:"li"},"ALLOWLIST_IP")," array. If not, we throw an error to stop the spell execution.")),(0,o.kt)("p",null,"If you don't want to throw an error and to make this alert silent, you can just do a ",(0,o.kt)("inlineCode",{parentName:"p"},"return;")," instead of throw a new error that would stop the execution."),(0,o.kt)("p",null,"If you want to log the source IP, you can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log(params.headers['x-forwarded-for'])")," to log the incoming IP address."))}f.isMDXComponent=!0}}]);